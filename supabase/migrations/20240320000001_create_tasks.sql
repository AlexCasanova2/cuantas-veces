-- Create tasks table
create table tasks (
  id bigint generated by default as identity primary key,
  title text not null,
  description text,
  category text not null,
  count integer default 0,
  progress integer default 0,
  date timestamp with time zone default timezone('utc'::text, now()) not null,
  time text,
  user_id uuid references auth.users on delete cascade not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create achievements table
create table achievements (
  id bigint generated by default as identity primary key,
  title text not null,
  description text,
  requirement integer not null,
  achieved boolean default false,
  task_id bigint references tasks on delete cascade not null,
  date timestamp with time zone,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Enable Row Level Security
alter table tasks enable row level security;
alter table achievements enable row level security;

-- Create policies for tasks
create policy "Users can view their own tasks."
  on tasks for select
  using ( auth.uid() = user_id );

create policy "Users can insert their own tasks."
  on tasks for insert
  with check ( auth.uid() = user_id );

create policy "Users can update their own tasks."
  on tasks for update
  using ( auth.uid() = user_id );

create policy "Users can delete their own tasks."
  on tasks for delete
  using ( auth.uid() = user_id );

-- Create policies for achievements
create policy "Users can view achievements of their tasks."
  on achievements for select
  using (
    exists (
      select 1 from tasks
      where tasks.id = achievements.task_id
      and tasks.user_id = auth.uid()
    )
  );

create policy "Users can insert achievements for their tasks."
  on achievements for insert
  with check (
    exists (
      select 1 from tasks
      where tasks.id = achievements.task_id
      and tasks.user_id = auth.uid()
    )
  );

create policy "Users can update achievements of their tasks."
  on achievements for update
  using (
    exists (
      select 1 from tasks
      where tasks.id = achievements.task_id
      and tasks.user_id = auth.uid()
    )
  );

create policy "Users can delete achievements of their tasks."
  on achievements for delete
  using (
    exists (
      select 1 from tasks
      where tasks.id = achievements.task_id
      and tasks.user_id = auth.uid()
    )
  );

-- Create triggers for updated_at
create trigger on_tasks_updated
  before update on tasks
  for each row
  execute procedure public.handle_updated_at();

create trigger on_achievements_updated
  before update on achievements
  for each row
  execute procedure public.handle_updated_at(); 